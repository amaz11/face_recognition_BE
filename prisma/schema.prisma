// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model exams_type {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  exams    exams[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model exams {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  examTypeId       Int
  exam_type        exams_type         @relation(fields: [examTypeId], references: [id])
  teachers_log     teachers_log[]
  createAt         DateTime           @default(now())
  updateAt         DateTime           @updatedAt
  exam_routine     exam_routine[]
  student_exam_log student_exam_log[]
}

model exam_routine {
  id       Int      @id @default(autoincrement())
  examId   Int
  exams    exams    @relation(fields: [examId], references: [id])
  examTime String
  examDate String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model exam_halls {
  id               Int                @id @default(autoincrement())
  address          String             @unique
  teacherLog       teachers_log[]
  student_exam_log student_exam_log[]
}

// model exam_room {
//   id         Int            @id @default(autoincrement())
//   roomNo     String         @unique
//   examHallId Int
//   examHall   exam_halls     @relation(fields: [examHallId], references: [id])
//   teacher    teachers_log[]
// }

model teachers {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  positions    String         @db.VarChar(50)
  email        String         @unique
  password     String
  phone        String         @db.Char(11)
  address      String         @db.VarChar(100)
  first_login  Boolean        @default(true)
  teachers_log teachers_log[]
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
}

model teachers_log {
  id           Int         @id @default(autoincrement())
  teacherId    Int
  teacher      teachers    @relation(fields: [teacherId], references: [id])
  examId       Int
  exams        exams       @relation(fields: [examId], references: [id])
  exam_halls   exam_halls? @relation(fields: [exam_hallsId], references: [id])
  exam_hallsId Int?
  exam_room    String
  exam_date    String
  exam_start   String
  exam_end     String
}

model students {
  id                 Int                     @id @default(autoincrement())
  name               String                  @db.VarChar(100)
  email              String                  @unique
  address            String                  @db.VarChar(100)
  password           String
  phone              String                  @db.VarChar(11)
  first_login        Boolean                 @default(true)
  registretionDone   Boolean                 @default(false)
  varify             Boolean                 @default(false)
  studentsFaceVector students_face_vectors[]
  student_exam_log   student_exam_log[]
  createAt           DateTime                @default(now())
  updateAt           DateTime                @updatedAt
}

model student_exam_log {
  id           Int        @id @default(autoincrement())
  studentId    Int
  student      students   @relation(fields: [studentId], references: [id])
  examId       Int
  exams        exams      @relation(fields: [examId], references: [id])
  rollNo       String
  registerNo   String
  exam_halls   exam_halls @relation(fields: [exam_hallsId], references: [id])
  exam_hallsId Int
  exam_room    String
  exam_date    String
  exam_start   String
  exam_end     String
  createAt     DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model students_face_vectors {
  id         Int      @id @default(autoincrement())
  faceVector String
  studentId  Int
  student    students @relation(fields: [studentId], references: [id])
  createAt   DateTime @default(now())
}

model photo_path {
  id   Int    @id @default(autoincrement())
  path String
}
