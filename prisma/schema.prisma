// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model exams_type {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  exams    exams[]
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model exams {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(255)
  examTypeId   Int
  exam_type    exams_type     @relation(fields: [examTypeId], references: [id])
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  exam_routine exam_routine[]
  exam_log     exam_log[]
}

model exam_log {
  id                    Int                  @id @default(autoincrement())
  examId                Int
  exam                  exams                @relation(fields: [examId], references: [id])
  exam_year             String               @db.VarChar(4)
  exam_date             String?
  exam_start            String?
  exam_end              String?
  registration_deadline String
  student_exam_log      student_exam_log[]
  teachers_log          teachers_log[]
  exam_log_token        exam_log_token[]
  exam_held_date_log    exam_held_date_log[]
  exam_halls            exam_halls[]
}

model exam_held_date_log {
  id      Int      @id @default(autoincrement())
  date    String
  examId  Int
  examLog exam_log @relation(fields: [examId], references: [id])
}

model exam_log_token {
  token     String
  examLogId Int      @unique
  examLog   exam_log @relation(fields: [examLogId], references: [id])
}

model exam_routine {
  id       Int      @id @default(autoincrement())
  examId   Int
  exams    exams    @relation(fields: [examId], references: [id])
  examTime String
  examDate String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model exam_halls {
  id         Int          @id @default(autoincrement())
  address    String       @unique
  examLogId  Int
  exam_log   exam_log     @relation(fields: [examLogId], references: [id])
  hall_rooms hall_rooms[]
}

model hall_rooms {
  id        Int         @id @default(autoincrement())
  roomNo    String
  capacity  Int
  hallId    Int
  hall      exam_halls  @relation(fields: [hallId], references: [id])
  seat      seat[]
  room_duty room_duty[]
}

model seat {
  id        Int              @id @default(autoincrement())
  roomId    Int
  studentId Int
  room      hall_rooms       @relation(fields: [roomId], references: [id])
  student   student_exam_log @relation(fields: [studentId], references: [id])
}

model teachers {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  positions    String         @db.VarChar(50)
  email        String         @unique
  password     String
  phone        String         @db.Char(11)
  address      String         @db.VarChar(100)
  first_login  Boolean        @default(true)
  teachers_log teachers_log[]
  createAt     DateTime       @default(now())
  updateAt     DateTime       @updatedAt
}

model teachers_log {
  id           Int         @id @default(autoincrement())
  teacherId    Int
  teacher      teachers    @relation(fields: [teacherId], references: [id])
  exam_hallsId Int?
  exam_log     exam_log    @relation(fields: [examLogId], references: [id])
  examLogId    Int
  room_duty    room_duty[]
}

model room_duty {
  id        Int          @id @default(autoincrement())
  teacherId Int
  teacher   teachers_log @relation(fields: [teacherId], references: [id])
  roomId    Int
  room      hall_rooms   @relation(fields: [roomId], references: [id])
}

model students {
  id                 Int                     @id @default(autoincrement())
  name               String                  @db.VarChar(100)
  email              String                  @unique
  address            String                  @db.VarChar(100)
  password           String
  phone              String                  @db.VarChar(11)
  first_login        Boolean                 @default(true)
  registretionDone   Boolean                 @default(false)
  varify             Boolean                 @default(false)
  studentsFaceVector students_face_vectors[]
  student_exam_log   student_exam_log[]
  createAt           DateTime                @default(now())
  updateAt           DateTime                @updatedAt
  photo_path         photo_path[]
}

model student_exam_log {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    students @relation(fields: [studentId], references: [id])
  rollNo     String?
  registerNo String?
  exam_log   exam_log @relation(fields: [examLogId], references: [id])
  examLogId  Int      @unique
  updateAt   DateTime @updatedAt
  createAt   DateTime @default(now())
  seat       seat[]
}

model students_face_vectors {
  id         Int          @id @default(autoincrement())
  faceVector String       @db.Text
  studentId  Int
  student    students     @relation(fields: [studentId], references: [id])
  createAt   DateTime     @default(now())
  photo_path photo_path[]
}

model photo_path {
  id           Int                   @id @default(autoincrement())
  image        String
  studentId    Int
  descriptorId Int
  descriptor   students_face_vectors @relation(fields: [descriptorId], references: [id])
  student      students              @relation(fields: [studentId], references: [id])
}

enum Role {
  SUPERADMIN
  ADMIN
}

model admin {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(100)
  email    String @unique
  address  String @db.VarChar(100)
  password String
  phone    String @db.VarChar(11)
  role     Role   @default(ADMIN)
}
